=begin
 ===========================
 CORE-NETWORK-PARSER (XML)
 ---------------------------
 Author: Dylan Zingler
 Date: 04-15-2015
 Purpose: From a downloaded network xml file,
 generated by saving a network in core as xml, 
 this script will parse it and generate 
 nodes-to-addrs.txt (nta) and 
 addrs-to-links.txt (atl) files.
 Usage: $ ruby ./network-parser.rb <YOUR-NETWORK.xml>
 
 Requirements: Nokogiri, ipaddress
 Notes: 
 
=end

require 'nokogiri'
require 'set'
require "ipaddress"

puts "MESSAGE: Your Network File" + ARGV[0]

# Check for '.xml' extension
if ARGV[0][-4..-1] != ".xml"
  puts "Wow Bad XML file extension, please give me a .xml file"
  exit
else  
  puts "MESSAGE: Good .xml file extension in Network File"
end   

doc = Nokogiri::XML(File.open(ARGV[0]))
puts "MESSAGE: FILE LOADED . . . \n###BEGIN######## YOUR XML FILE: "+ ARGV[0] +" ###############\n" + doc.xpath("//Scenario").to_s + "\n###END######## YOUR XML FILE: "+ ARGV[0] +" ###############\n" 
nodes = doc.xpath("//Node[@name = 'n1'][@type='PC']")
puts nodes
node_names = []

doc.xpath("//Node").each do |node|
      node_names << node["name"]           
end 

node_names = node_names.to_set 
puts "MESSAGE: Gathered these Nodes From Network ####" + node_names.inspect

node_to_addr = {}
node_names.each {|name|     
    addresses = doc.xpath("//Node[@name = '" + name + "'][@type='PC']/interface/address")    
    addresses.each {|addr|
      if /((25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)\.){3}(25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)/ =~ addr.text
        puts "my lord and savior MeGusto" + addr.text
        puts name
        if node_to_addr[name] == nil
          node_to_addr[name] = []
        end 
        node_to_addr[name] << addr.text        
      end       
      }    
    puts "NODE: "+ name +   " Has addresses " + addresses.to_s
    
    interfaces = addresses.children
    
    interfaces.each {|i|
      i.xpath("//address").each {|addr|
        valid = IPAddress.valid? addr.text
        #puts "MESSAGE: Address:" + addr.text + " is IPV4? " + valid.to_s         
        }            
      }  
    }
    
puts node_to_addr.to_s
nta_name = ARGV[0][0..-5] + '-nodes-to-addrs.txt'
puts nta_name

somefile = File.open(nta_name, "w")

node_to_addr.keys.each {|key, value|
  puts node_to_addr[key].to_s
  node_to_addr[key].each {|addr|
    somefile.puts key + "\t" + addr[0..-4]
    }
  }
somefile.close

addrs_to_links = []

doc.xpath("//NetworkDefinition").each do |net|
  addrs_to_links << net["name"]  
end

puts addrs_to_links.inspect

ad = {}
addrs_to_links.each {|net|
  
  interpair = []
  doc.xpath("//Node[@type='PC']/interface[@net='"+ net + "']/address").each {|addr|
    if /((25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)\.){3}(25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)/ =~ addr.text
  
        interpair << addr.text
    end
  }  
  ad[net] = interpair
}
  
#puts ad.inspect
atl_name = ARGV[0][0..-5] + '-addrs-to-links.txt'
#puts atl_name

somefile = File.open(atl_name, "w")
ad.keys.each {|key, value|
  somefile.puts ad[key][0][0..-4] + "\t"+ ad[key][1][0..-4]
  }
somefile.close